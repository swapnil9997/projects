How to work with eureka server?
#1. setup an spring boot + spring cloud project with below starter dependencies
	1.1 spring-cloud-starter
	1.2 spring-cloud-starter-config
	1.3 spring-boot-starter
	1.4 spring-cloud-eureka-server
	
#2. 	
There are 2 aspects we need know about eureka server
2.1 Eureka Server by default comes up with dicovery client api. 
Discovery Client Api is usually used by the client applications inorder to communicate with the EurekaServer for identifying the microservices on the cluster. 
What is the reason for having the Eureka Server packaged/shipped with Discovery Client?
while running the eureka server in production environment, we host multiple replicas of eureka server as master/slave for high availability. The slave eureka server discover and register itself with master through using the discovery client api.
	
by default the discover client is enabled, so that during the startup eureka server will try to locate and register itself with another eureka server. when we are hosting an master eureka server, it doesnt require to register with another server, so we need to disable the discovery client for master server.
	
2.2 The slave server upon registering himself as a replica with master, he fetches the registry from the master and populates all the microservices information of the cluster, by default fetching the registry is enabled, so that when we bootup master also it tries to fetch the registry which should be disabled.
	
	
application.yml
eureka:
  client:
    register-with-eureka: false
		fetch-registry: false

with the above configuration we have disabled discovery client from master eureka server. 
register-with-eureka: false = this means eureka server should not discover another eureka server and register on the cluster, because we are running only one master server now

fetch-registry: false = the eureka server will tries to pull the registry information from another eureka server and populates by default, which should be turned off incase of master

by reading the above to #2 configurations, the AutoConfiguration classes takes care of configuring the Eureka Endpoint

#3 How to enable autoconfiguration for registring the EurekaServer?
we need to use @EnableEurekaServer annotation on SpringApplication class
	
@SpringBootApplication
@EnableEurekaServer
class EurekaServerApplication {}
-----------------------------------------------------------------------------------------------------------------------------------
How to register Microservice Application with Eureka Server?
As we have the Discovery Server up and running, its time to have our microservice application registered with Eureka Server during the startup and publish the heartbeats periodically to the eureka server to let the eureka server know the liveliness of the Microservice.
	
In order to let the microservice application register and publish the heartbeats with eurekaserver we need eureka client library to be used.
	
The Netflix eureka client library provides capabilities of registering with eureka server and publising heartbeats. for this we need to add configuration information	pertaining to eurekaserver letting him register with eureka

athena-pharmacy
|-src
  |-main
		|-java
			|-AthenaPharamacyApplication.java
		|-resources
			|-application.yml
			|-bootstrap.yml
			
[ConfigServer]			
pharmacy-service.yml
---------------------
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
		url: jdbc:mysql://localhost:3306/db
		username: root
		password: root
	jpa:
    show-sql: true
		ddl-auto: false

eureka:
  client:
    register-with-eureka: true
		fetch-registry: false
		service-url:
      defaultZone: http://localhost:8889/eureka

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			



















	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	